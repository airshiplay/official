package com.airshiplay.official.mybatis.model;

import java.io.Serializable;
import java.util.Date;

public class OfAccessToken implements Serializable {
    /**
     * database column <code>of_access_token.access_token</code>
     */
    private String accessToken;

    /**
     * database column <code>of_access_token.uid</code>
     */
    private Long uid;

    /**
     * 创建时间
     * <p> 
     * database column <code>of_access_token.create_time</code>
     */
    private Date createTime;

    /**
     * 结束时间
     * <p> 
     * database column <code>of_access_token.expires</code>
     */
    private Date expires;

    /**
     * database column <code>of_access_token.app_id</code>
     */
    private Long appId;

    /**
     * 请求终端类型
     * <p> 
     * database column <code>of_access_token.display</code>
     */
    private String display;

    /**
     * 1、无效；2、有效
     * <p> 
     * database column <code>of_access_token.status</code>
     */
    private Integer status;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table of_access_token
     * @mbggenerated
     */
    private static final long serialVersionUID = 1L;

    /**
     * @return access_token
     */
    public String getAccessToken() {
        return accessToken;
    }

    /**
     * @param accessToken
     */
    public void setAccessToken(String accessToken) {
        this.accessToken = accessToken == null ? null : accessToken.trim();
    }

    /**
     * @return uid
     */
    public Long getUid() {
        return uid;
    }

    /**
     * @param uid
     */
    public void setUid(Long uid) {
        this.uid = uid;
    }

    /**
     * 获取创建时间
     *
     * @return create_time - 创建时间
     */
    public Date getCreateTime() {
        return createTime;
    }

    /**
     * 设置创建时间
     *
     * @param createTime 创建时间
     */
    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }

    /**
     * 获取结束时间
     *
     * @return expires - 结束时间
     */
    public Date getExpires() {
        return expires;
    }

    /**
     * 设置结束时间
     *
     * @param expires 结束时间
     */
    public void setExpires(Date expires) {
        this.expires = expires;
    }

    /**
     * @return app_id
     */
    public Long getAppId() {
        return appId;
    }

    /**
     * @param appId
     */
    public void setAppId(Long appId) {
        this.appId = appId;
    }

    /**
     * 获取请求终端类型
     *
     * @return display - 请求终端类型
     */
    public String getDisplay() {
        return display;
    }

    /**
     * 设置请求终端类型
     *
     * @param display 请求终端类型
     */
    public void setDisplay(String display) {
        this.display = display == null ? null : display.trim();
    }

    /**
     * 获取1、无效；2、有效
     *
     * @return status - 1、无效；2、有效
     */
    public Integer getStatus() {
        return status;
    }

    /**
     * 设置1、无效；2、有效
     *
     * @param status 1、无效；2、有效
     */
    public void setStatus(Integer status) {
        this.status = status;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table of_access_token
     * @mbggenerated
     */
    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (that == null) {
            return false;
        }
        if (getClass() != that.getClass()) {
            return false;
        }
        OfAccessToken other = (OfAccessToken) that;
        return (this.getAccessToken() == null ? other.getAccessToken() == null : this.getAccessToken().equals(other.getAccessToken()))
            && (this.getUid() == null ? other.getUid() == null : this.getUid().equals(other.getUid()))
            && (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))
            && (this.getExpires() == null ? other.getExpires() == null : this.getExpires().equals(other.getExpires()))
            && (this.getAppId() == null ? other.getAppId() == null : this.getAppId().equals(other.getAppId()))
            && (this.getDisplay() == null ? other.getDisplay() == null : this.getDisplay().equals(other.getDisplay()))
            && (this.getStatus() == null ? other.getStatus() == null : this.getStatus().equals(other.getStatus()));
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table of_access_token
     * @mbggenerated
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((getAccessToken() == null) ? 0 : getAccessToken().hashCode());
        result = prime * result + ((getUid() == null) ? 0 : getUid().hashCode());
        result = prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());
        result = prime * result + ((getExpires() == null) ? 0 : getExpires().hashCode());
        result = prime * result + ((getAppId() == null) ? 0 : getAppId().hashCode());
        result = prime * result + ((getDisplay() == null) ? 0 : getDisplay().hashCode());
        result = prime * result + ((getStatus() == null) ? 0 : getStatus().hashCode());
        return result;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table of_access_token
     * @mbggenerated
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", accessToken=").append(accessToken);
        sb.append(", uid=").append(uid);
        sb.append(", createTime=").append(createTime);
        sb.append(", expires=").append(expires);
        sb.append(", appId=").append(appId);
        sb.append(", display=").append(display);
        sb.append(", status=").append(status);
        sb.append(", serialVersionUID=").append(serialVersionUID);
        sb.append("]");
        return sb.toString();
    }
}